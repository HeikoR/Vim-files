" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Setup Pathogen
call pathogen#infect()
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
filetype plugin indent on


" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


" Heiko's customizations here ...
"
"

" Shortcut to rapidly toggle 'set list'
nmap <leader>l :set list!<CR>

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:-.,eol:¬

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59


" Configure Solarized (Colors)
" set background=dark|light
syntax enable
if has('gui_running')
    set background=light
else
    set background=dark
	"let g:solarized_termcolors=16
	let g:solarized_contrast = "normal"
	let g:solarized_visibility= "normal"
endif
let g:solarized_italic=0		" default value is 1
colorscheme solarized


" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction
  
function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction


set tabstop=4
set softtabstop=4
set shiftwidth=4 

if has("gui_running")
  " GUI is running or is about to start.
  " Maximize gvim window.
  set lines=50 columns=120
else
  " This is console Vim.
  if exists("+lines")
    set lines=50
  endif
  if exists("+columns")
    set columns=100
  endif
endif

" Prevent backup file from being left behind after VIM closes
set nobackup
" Prevent backup files from being created while the filee is beign edited
"set nowritebackup

" Prevent swapfile from being created while file is being edited
"set noswapfile

"
" Configure NodeJS dictionary
"	type CTRL-X CTRL-K CTRL-N
":set dictionary-=$HOME/bundle/vim-node/dict/node.dict dictionary+=$HOME/bundle/vim-node/dict/node.dict
set dictionary+=$HOME/vimfiles/bundle/vim-node/dict/node.dict
" allows us to use CTRL-N (next) and CTRL-P (previous) to cycle through
" dict
set complete-=k complete+=k


nnoremap ; :				" remaps ; to : in normal mode. Thus save us some keystrokes on typing :

" tab navigation like firefox
" hwr --> Tried to map shortcut keys to tabs but could get it to work, maybe
" because there are already keys assigned ... ?????
":nmap <C-S-tab> :tabprevious<CR>
":nmap <C-tab> :tabnext<CR>
":map <C-S-tab> :tabprevious<CR>
":map <C-tab> :tabnext<CR>
":imap <C-S-tab> <Esc>:tabprevious<CR>i
":imap <C-tab> <Esc>:tabnext<CR>i
":nmap <C-t> :tabnew<CR>
":imap <C-t> <Esc>:tabnew<CR>

":map <C-S-tab> :tabprevious<CR>
":map <C-tab> :tabnext<CR>
":map <C-t> :tabnew<CR>

" Display output of shell command in new window
" use <localleader>r to repeat command
" use <localleader>g to go to the previous window
" use :Shell! to  reexecute last command
" e.g :Shell ls -l
" will reuse old output window on subsequent shell commands
function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)


" Shortcut to convert Markdown to Html
" Requires Node.js installed, and package "gh-markdown-cli"
":nmap <LocalLeader>md :!start cmd.exe /c /min "type % \| mdown -o "%.html""<CR>:echo "ran: Markdown 2 Html"<CR>
:nnoremap <silent> <leader>md :!start cmd /c type "%:p" \| mdown -o "%:p:r:s,$,.html,"<CR>



